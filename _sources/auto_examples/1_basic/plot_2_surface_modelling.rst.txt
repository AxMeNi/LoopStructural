
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/1_basic/plot_2_surface_modelling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_1_basic_plot_2_surface_modelling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_1_basic_plot_2_surface_modelling.py:


1b. Implicit surface modelling
===============================
This tutorial will demonstrate how to create an implicit surface
representation of surfaces from a combination of orientation and
location observations.

Implicit surface representation involves finding an unknown function
where :math:`f(x,y,z)` matches observations of the surface geometry. We
generate a scalar field where the scalar value is the distance away from
a reference horizon. The reference horizon is arbritary and can either
be:

-  a single geological surface where the scalar field would represent
   the signed distance away from this surface. (above the surface
   positive and below negative)
-  Where multiple conformable horizons are observed the same scalar
   field can be used to represent these surfaces and the thickness of
   the layers is used to determine the relative scalar value for each
   surface

This tutorial will demonstrate both of these approaches for modelling a
number of horizons picked from seismic data sets, by following the next
steps: 1. Creation of a geological model, which includes: \*
Presentation and visualization of the data \* Addition of a geological
feature, which in this case is the stratigraphy of the model. 2.
Visualization of the scalar field.

.. GENERATED FROM PYTHON SOURCE LINES 33-37

Imports
~~~~~~~
Import the required objects from LoopStructural for visualisation and
model building

.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default


    from LoopStructural import GeologicalModel
    from LoopStructural.visualisation import LavaVuModelViewer
    from LoopStructural.datasets import load_claudius #demo data

    import pandas as pd
    import glob
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 48-51

The data for this example can be imported from the example datasets
module in loopstructural.


.. GENERATED FROM PYTHON SOURCE LINES 51-57

.. code-block:: default


    data, bb = load_claudius()

    data['val'].unique()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([250., 330.,   0.,  60.,  nan])



.. GENERATED FROM PYTHON SOURCE LINES 58-65

GeologicalModel
~~~~~~~~~~~~~~~

To create a ``GeologicalModel`` the origin (lower left) and max extent
(upper right) of the model area need to be specified. In this example
these are provided in the bb array.


.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default


    model = GeologicalModel(bb[0,:],bb[1,:])









.. GENERATED FROM PYTHON SOURCE LINES 70-90

A pandas dataframe with appropriate columns can be used to link the data
to the geological model. 

* ``X`` is the x coordinate 
* ``Y`` is the y # coordinate 
* ``Z`` is the z coordinate 
* ``feature_name`` is a name to link the data to a model object 
* ``val`` is the value of the scalar field which represents the 
distance from a reference horizon. It is comparable
to the relative thickness 

* ``nx`` is the x component of the normal vector to the surface gradient 
* ``ny`` is the y component of the normal vector to the surface gradient 
* ``nz`` is the z component of the normal vector to the surface gradeint 
* ``strike`` is the strike angle 
* ``dip`` is the dip angle

Having a look at the data for this example by looking at the top of the
dataframe and then using a 3D plot


.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: default


    data['feature_name'].unique()

    viewer = LavaVuModelViewer(background='white')
    viewer.add_value_data(data[~np.isnan(data['val'])][['X','Y','Z']],data[~np.isnan(data['val'])]['val'],name='value points')
    viewer.add_vector_data(data[~np.isnan(data['nx'])][['X','Y','Z']],
                           data[~np.isnan(data['nx'])][['nx','ny','nz']],name='orientation points')
    viewer.rotate([-85.18760681152344, 42.93233871459961, 0.8641873002052307])
    viewer.display()





.. image:: /auto_examples/1_basic/images/sphx_glr_plot_2_surface_modelling_001.png
    :alt: plot 2 surface modelling
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-105

The pandas dataframe can be linked to the ``GeologicalModel`` using
``.set_model_data(dataframe``


.. GENERATED FROM PYTHON SOURCE LINES 105-109

.. code-block:: default


    model.set_model_data(data)









.. GENERATED FROM PYTHON SOURCE LINES 110-141

The ``GeologicalModel`` contains an ordered list of the different
geological features within a model and how these features interact. This
controls the topology of the different geological features in the model.
Different geological features can be added to the geological model such
as: 
* Foliations 
* Faults 
* Unconformities 
* Folded foliations 
*  Structural Frames

In this example we will only add a foliation using the function

.. code:: python

   model.create_and_add_foliation(name)

where name is the name in the ``feature_name`` field, other parameters we
specified are the: 
* ``interpolatortype`` - we can either use a
PiecewiseLinearInterpolator ``PLI``, a FiniteDifferenceInterpolator
``FDI`` or a radial basis interpolator ``surfe`` 
* ``nelements - int`` is the how many elements are used to discretize the resulting solution
* ``buffer - float`` buffer percentage around the model area
* ``solver`` - the algorithm to solve the least squares problem e.g.
``lu`` for lower upper decomposition, ``cg`` for conjugate gradient,
``pyamg`` for an algorithmic multigrid solver 
* ``damp - bool`` - whether to add a small number to the diagonal of the interpolation
matrix for discrete interpolators - this can help speed up the solver
and makes the solution more stable for some interpolators


.. GENERATED FROM PYTHON SOURCE LINES 141-160

.. code-block:: default


    vals = [0,60,250,330,600]

    strat_column = {'strati':{}}
    for i in range(len(vals)-1):
        strat_column['strati']['unit_{}'.format(i)] = {'min':vals[i],'max':vals[i+1],'id':i}
    



    model.set_stratigraphic_column(strat_column)

    strati = model.create_and_add_foliation("strati",
                                               interpolatortype="FDI", # try changing this to 'PLI'
                                               nelements=1e4, # try changing between 1e3 and 5e4
                                               buffer=0.3,
                                               solver='pyamg',
                                               damp=True
                                              )







.. GENERATED FROM PYTHON SOURCE LINES 161-163

Plot the surfaces
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 163-169

.. code-block:: default


    viewer = LavaVuModelViewer(model)
    viewer.add_model_surfaces(cmap='tab20')
    viewer.rotate([-85.18760681152344, 42.93233871459961, 0.8641873002052307])
    viewer.display()




.. image:: /auto_examples/1_basic/images/sphx_glr_plot_2_surface_modelling_002.png
    :alt: plot 2 surface modelling
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]    Isosurfacing strati:   0%|          | 0/4 [00:00<?, ?it/s]    Isosurfacing strati: 100%|##########| 4/4 [00:01<00:00,  3.12it/s]Adding surfaces took 1.285731554031372 seconds
    Isosurfacing strati: 100%|##########| 4/4 [00:01<00:00,  3.12it/s]




.. GENERATED FROM PYTHON SOURCE LINES 170-172

Plot block diagram
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 172-181

.. code-block:: default


    viewer = LavaVuModelViewer(model)
    viewer.add_model(cmap='tab20')
    viewer.rotate([-85.18760681152344, 42.93233871459961, 0.8641873002052307])
    viewer.display()







.. image:: /auto_examples/1_basic/images/sphx_glr_plot_2_surface_modelling_003.png
    :alt: plot 2 surface modelling
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.357 seconds)


.. _sphx_glr_download_auto_examples_1_basic_plot_2_surface_modelling.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_2_surface_modelling.py <plot_2_surface_modelling.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_2_surface_modelling.ipynb <plot_2_surface_modelling.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
