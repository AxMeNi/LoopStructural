
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/1_basic/plot_7_exporting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_1_basic_plot_7_exporting.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_1_basic_plot_7_exporting.py:


1j. Exporting models
===============================

Models can be exported to vtk, gocad and geoh5 formats.

.. GENERATED FROM PYTHON SOURCE LINES 8-19

.. code-block:: Python


    from LoopStructural import GeologicalModel
    from LoopStructural.datasets import load_claudius

    data, bb = load_claudius()

    model = GeologicalModel(bb[0, :], bb[1, :])
    model.data = data
    model.create_and_add_foliation("strati")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -----------------------------------------------------
    strati 1 
    -----------------------------------------------------
    	0 regions
    	0 faults.
    	Fault enabled True




.. GENERATED FROM PYTHON SOURCE LINES 20-30

Export surfaces to vtk
~~~~~~~~~~~~~~~~~~~~~~
Isosurfaces can be extracted from a geological feature by calling
the `.surfaces` method on the feature. The argument for this method
is the value, values or number of surfaces that are extracted.
This returns a list of `LoopStructural.datatypes.Surface` objects
These objects can be interrogated to return the triangles, vertices
and normals. Or can be exported into another format using the `save`
method. The supported file formats are `vtk`, `ts` and `geoh5`.


.. GENERATED FROM PYTHON SOURCE LINES 30-39

.. code-block:: Python


    surfaces = model['strati'].surfaces(value=0.0)

    print(surfaces)

    print(surfaces[0].vtk)

    # surfaces[0].save('text.geoh5')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Surface(vertices=array([[ 548800.        , 7816600.        ,   -8890.0935173 ],
           [ 548875.51020408, 7816600.        ,   -8884.0983367 ],
           [ 548800.        , 7816710.20408163,   -8889.89708662],
           ...,
           [ 552500.        , 7821779.59183673,   -8825.66031218],
           [ 552500.        , 7821889.79591837,   -8815.85267544],
           [ 552500.        , 7822000.        ,   -8806.62624121]]), triangles=array([[   2,    1,    0],
           [   2,    3,    1],
           [   4,    3,    2],
           ...,
           [2681, 2740, 2739],
           [2682, 2740, 2681],
           [2682, 2741, 2740]], dtype=int32), normals=array([[-0.05464138, -0.00181299,  0.9985044 ],
           [-0.05544513, -0.01615995,  0.99833095],
           [-0.06904541, -0.00175956,  0.99761194],
           ...,
           [-0.03647267, -0.08397566,  0.9958001 ],
           [-0.03921535, -0.08051164,  0.99598193],
           [-0.04905119, -0.06791639,  0.9964845 ]], dtype=float32), name='strati_0.0', values=array([0., 0., 0., ..., 0., 0., 0.]), properties=None, cell_properties=None)]
    <bound method Surface.vtk of Surface(vertices=array([[ 548800.        , 7816600.        ,   -8890.0935173 ],
           [ 548875.51020408, 7816600.        ,   -8884.0983367 ],
           [ 548800.        , 7816710.20408163,   -8889.89708662],
           ...,
           [ 552500.        , 7821779.59183673,   -8825.66031218],
           [ 552500.        , 7821889.79591837,   -8815.85267544],
           [ 552500.        , 7822000.        ,   -8806.62624121]]), triangles=array([[   2,    1,    0],
           [   2,    3,    1],
           [   4,    3,    2],
           ...,
           [2681, 2740, 2739],
           [2682, 2740, 2681],
           [2682, 2741, 2740]], dtype=int32), normals=array([[-0.05464138, -0.00181299,  0.9985044 ],
           [-0.05544513, -0.01615995,  0.99833095],
           [-0.06904541, -0.00175956,  0.99761194],
           ...,
           [-0.03647267, -0.08397566,  0.9958001 ],
           [-0.03921535, -0.08051164,  0.99598193],
           [-0.04905119, -0.06791639,  0.9964845 ]], dtype=float32), name='strati_0.0', values=array([0., 0., 0., ..., 0., 0., 0.]), properties=None, cell_properties=None)>




.. GENERATED FROM PYTHON SOURCE LINES 40-45

Export the model to geoh5
~~~~~~~~~~~~~~~~~~~~~~~~~
The entire model can be exported to a geoh5 file using the `save_model`
method. This will save all the data, foliations, faults and other objects
in the model to a geoh5 file. This file can be loaded into LoopStructural

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: Python


    # model.save('model.geoh5')








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.200 seconds)


.. _sphx_glr_download__auto_examples_1_basic_plot_7_exporting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_7_exporting.ipynb <plot_7_exporting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_7_exporting.py <plot_7_exporting.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_7_exporting.zip <plot_7_exporting.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
