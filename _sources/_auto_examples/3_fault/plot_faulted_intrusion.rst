
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/3_fault/plot_faulted_intrusion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_3_fault_plot_faulted_intrusion.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_3_fault_plot_faulted_intrusion.py:


3a. Modelling faults using structural frames
========================================

.. GENERATED FROM PYTHON SOURCE LINES 6-16

.. code-block:: Python


    from LoopStructural import GeologicalModel
    from LoopStructural.visualisation import LavaVuModelViewer
    from LoopStructural.datasets import load_intrusion
    import numpy as np
    import matplotlib.pyplot as plt

    data, bb = load_intrusion()









.. GENERATED FROM PYTHON SOURCE LINES 17-32

Modelling faults using structural frames
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Standard implicit modelling techniques either treat faults as domain
boundaries or use a step function in the implicit function to capture
the displacement in the faulted surface.

Adding faults into the implicit function using step functions is limited
because this does not capture the kinematics of the fault. It
effectively defines the fault displacement by adding a value to the
scalar field on the hanging wall of the fault. In the example below a
2-D ellipsoidal function is combined with a step function to show how
the resulting geometry results in a shrinking shape. This would be
representative of modelling an intrusion.


.. GENERATED FROM PYTHON SOURCE LINES 32-45

.. code-block:: Python


    intrusion = lambda x, y: (x * 2) ** 2 + (y**2)
    x = np.linspace(-10, 10, 100)
    y = np.linspace(-10, 10, 100)
    xx, yy = np.meshgrid(x, y)
    fault = np.zeros(xx.shape)
    fault[yy > 0] = 50
    val = intrusion(xx, yy) + fault


    plt.contourf(val)





.. image-sg:: /_auto_examples/3_fault/images/sphx_glr_plot_faulted_intrusion_001.png
   :alt: plot faulted intrusion
   :srcset: /_auto_examples/3_fault/images/sphx_glr_plot_faulted_intrusion_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.contour.QuadContourSet object at 0x7f3cb85d5f60>



.. GENERATED FROM PYTHON SOURCE LINES 46-53

LoopStructural applies structural frames to the fault geometry to
capture the geometry and kinematics of the fault. A fault frame
consisting of the fault surface, fault slip direction and fault extent
are built from observations. The geometry of the deformed surface is
then interpolated by first restoring the observations by combining the
fault frame and an expected displacement model.


.. GENERATED FROM PYTHON SOURCE LINES 53-107

.. code-block:: Python


    model = GeologicalModel(bb[0, :], bb[1, :])
    model.set_model_data(data)
    fault = model.create_and_add_fault(
        "fault", 500, nelements=10000, steps=4, interpolatortype="FDI", buffer=0.3
    )

    viewer = LavaVuModelViewer(model)
    viewer.add_isosurface(
        fault,
        isovalue=0,
        #                       slices=[0,1]#nslices=10
    )
    xyz = model.data[model.data["feature_name"] == "strati"][["X", "Y", "Z"]].to_numpy()
    xyz = xyz[fault.evaluate(xyz).astype(bool), :]
    viewer.add_vector_field(fault, locations=xyz)
    viewer.add_points(
        model.rescale(
            model.data[model.data["feature_name"] == "strati"][["X", "Y", "Z"]],
            inplace=False,
        ),
        name="prefault",
    )
    viewer.rotation = [-73.24819946289062, -86.82220458984375, -13.912878036499023]
    viewer.display()


    displacement = 400  # INSERT YOUR DISPLACEMENT NUMBER HERE BEFORE #

    model = GeologicalModel(bb[0, :], bb[1, :])
    model.set_model_data(data)
    fault = model.create_and_add_fault(
        "fault", displacement, nelements=2000, steps=4, interpolatortype="PLI", buffer=2
    )
    strati = model.create_and_add_foliation("strati", nelements=30000, interpolatortype="PLI", cgw=0.03)
    model.update()
    viewer = LavaVuModelViewer(model)
    viewer.add_isosurface(strati, isovalue=0)
    # viewer.add_data(model.features[0][0])
    viewer.add_data(strati)
    viewer.add_isosurface(
        fault,
        isovalue=0,
        #                       slices=[0,1]#nslices=10
    )
    viewer.add_points(
        model.rescale(
            model.data[model.data["feature_name"] == "strati"][["X", "Y", "Z"]],
            inplace=False,
        ),
        name="prefault",
    )
    viewer.rotation = [-73.24819946289062, -86.82220458984375, -13.912878036499023]
    viewer.display()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /_auto_examples/3_fault/images/sphx_glr_plot_faulted_intrusion_002.png
          :alt: plot faulted intrusion
          :srcset: /_auto_examples/3_fault/images/sphx_glr_plot_faulted_intrusion_002.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /_auto_examples/3_fault/images/sphx_glr_plot_faulted_intrusion_003.png
          :alt: plot faulted intrusion
          :srcset: /_auto_examples/3_fault/images/sphx_glr_plot_faulted_intrusion_003.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]    Interpolating fault:   0%|          | 0/4 [00:00<?, ?it/s]    Interpolating fault:  50%|█████     | 2/4 [00:00<00:00,  4.11it/s]    Interpolating strati:  75%|███████▌  | 3/4 [00:00<00:00,  4.11it/s]    Interpolating strati: : 7it [00:36,  5.65s/it]                         Interpolating strati: : 7it [00:36,  5.18s/it]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 40.156 seconds)


.. _sphx_glr_download__auto_examples_3_fault_plot_faulted_intrusion.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_faulted_intrusion.ipynb <plot_faulted_intrusion.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_faulted_intrusion.py <plot_faulted_intrusion.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
